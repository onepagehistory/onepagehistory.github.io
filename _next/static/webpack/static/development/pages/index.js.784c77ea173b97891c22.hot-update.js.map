{"version":3,"file":"static/webpack/static/development/pages/index.js.784c77ea173b97891c22.hot-update.js","sources":["webpack:///./src/shared/toRoman.ts"],"sourcesContent":["// taken form https://www.selftaughtjs.com/algorithm-sundays-converting-roman-numerals/\nexport const numberToRoman = (value: number) => {\n    let result = '';\n    const decimal = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const roman = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I'];\n    for (let i = 0; i <= decimal.length; i++) {\n        while (value % decimal[i] < value) {\n            result += roman[i];\n            value -= decimal[i];\n        }\n    }\n    return result;\n}\n\nexport const centuryToRoman = (value: number) => {\n    const sign = Math.sign(value);\n    const num = Math.abs(value);\n    if (sign === 0) {\n        return numberToRoman(num + 1);\n    }\n\n    if (sign < 0) {\n        return `${numberToRoman(num + 1)} BCE`\n    }\n\n    return numberToRoman(num);\n}\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}